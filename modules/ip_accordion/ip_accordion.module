<?php

/**
 * @file
 * Ip_accordion module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function ip_accordion_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.ip_accordion':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_theme().
 *
 * Lets us define our paragraphs templates in this module.
 */
function ip_accordion_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__ip_accordion' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__ip_accordion_item' => [
      'base hook' => 'paragraph',
    ],
    'field__paragraph__field_ip_ac_body' => [
      'base hook' => 'paragraph',
    ],
    'field__paragraph__field_ip_ac_title' => [
      'base hook' => 'paragraph',
    ],
    'field__paragraph__field_ip_ac_item' => [
      'base hook' => 'paragraph',
    ],
  ];
}

/**
 * Implements hook_preprocess_paragraph().
 *
 * This sets several variables needed for the silc accordion options.
 */
function ip_accordion_preprocess_paragraph__ip_accordion(&$variables) {
  $variables['accordion_id'] = $variables['elements']['#paragraph']->uuid->value;
  // Set JavaScript data attributes to animate opening/closing.
  if ($variables['elements']['#paragraph']->field_ip_ac_animate->value == 1) {
    $variables['ip_accordion_animated'] = 'data-silc-accordion-animated';
  }
  // Set JavaScript data attributes to open first accordion by default.
  if ($variables['elements']['#paragraph']->field_ip_ac_open_first->value == 1) {
    $variables['ip_accordion_open_first'] = 'data-silc-accordion-open-first';
  }
  // Set JavaScript data attributes to allow multiple content areas to be open.
  if ($variables['elements']['#paragraph']->field_ip_ac_allow_mult->value == 1) {
    $variables['ip_accordion_open_multiple'] = 'data-silc-accordion-open-multiple';
  }
  // Set classes and for accordions, accordions that become tabs, or tabs.
  $type = $variables['elements']['#paragraph']->field_ip_ac_type->value;
  $variables['ip_accordion_type'] = 'silc-accordion';
  if ($type == 'tabs_w_accordion_mobile') {
    $variables['ip_accordion_type'] = 'silc-accordion silc-accordion--become-tabs silc-accordion--stretch-tabs';
  }
  elseif ($type == 'tabs') {
    $variables['ip_accordion_type'] = 'silc-accordion silc-accordion--tabs';
  }
}

/**
 * Implements hook_preprocess_paragraph().
 *
 * This preproccess gets the uuid value of an individual accordion item.
 */
function ip_accordion_preprocess_paragraph__ip_accordion_item(&$variables) {
  $variables['accordion_id'] = $variables['elements']['#paragraph']->getParentEntity()->uuid->value;
  $variables['section_id'] = $variables['elements']['#paragraph']->uuid->value;
}

/**
 * Implements hook_field_WIDGET_TYPE_paragraphs_form_alter().
 *
 * Adds "Content Tips from idfive" helper text to the paragraph.
 */
function ip_accordion_field_widget_paragraphs_form_alter(&$element, &$form_state, $context) {
  if ($element['#paragraph_type'] == 'ip_accordion') {

    // Tips text from idfive.
    $markup = '<h3>Do:</h3><ul>';
    $markup .= '<li><strong>Use 3-6 accordions/tabs.</strong> Content in 1-2 accordions/tabs can most likely be organized using basic paragraph styles and widgets.</li>';
    $markup .= '<li><strong>Keep headings short.</strong> Additional detail can always be put inside the tab as a subheading.</li>';
    $markup .= '<li><strong>Keep content length reasonable.</strong> Since accordions/tabs are hiding information, users may skip over info if it is buried in a super-long accordion. Breaking out information into separate accordions can help. Also make sure the content isn’t too short; several accordions each containing only a few words to a sentence doesn’t justify the use of that accordion.</li>';
    $markup .= '</ul>';
    $markup .= '<h3>Dont:</h3><ul>';
    $markup .= '<li><strong>Use very long headings.</strong> Instead, try to move text down in to the body of the accordion/tab.</li>';
    $markup .= '<li><strong>Embed too many elements.</strong> For example, using multiple images or tables. If accordion content is becoming crowded or too busy, it may need to be separated out as its own section.</li>';
    $markup .= '<li><strong>Use the "link target" option without good reason.</strong> Opening links in new windows automatically is against WCAG 2.0 AAA. There is a strong movement towards letting users decide for themselves to open in a new window or not.</li>';
    $markup .= '</ul>';
    $markup .= '<p><a target="_blank" href="/admin/help/ip_accordion">Accordion Module Help</a></p>';
    $element['ip_accordion_tips'] = [
      '#type' => 'details',
      '#title' => t('Accordion Group Content Tips'),
      '#weight' => -1000,
    ];
    $element['ip_accordion_tips']['#markup'] = $markup;

  }
}
